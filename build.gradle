/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2021 Vladimir Orany.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.bintray'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.coveralls'
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = '**UNDEFINED**'
if (!project.hasProperty('bintrayApiKey'))   ext.bintrayApiKey   = '**UNDEFINED**'

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Micronaut Worker'
        vendor      = 'Agorapulse'
        description = 'Micronaut Worker'

        links {
            website      = "https://github.com/" + slug
            issueTracker = "https://github.com/" + slug + "/issues"
            scm          = "https://github.com/" + slug + ".git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = "" + project.rootProject.buildDir + "/repos/local/release"
            }
            repository {
                name = 'localSnapshot'
                url  = "" + project.rootProject.buildDir + "/repos/local/snapshot"
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        signing             = false
        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    bintray {
        credentials {
            username = bintrayUsername
            password = bintrayApiKey
        }
        // TODO: replace
        userOrg    = 'agorapulse'
        repo       = 'libs'
        name       = 'micronaut-worker'
        publish    = true
    }

    quality {
        checkstyle {
            ignoreFailures  = false
            toolVersion     = '8.27'
        }

        codenarc {
            ignoreFailures  = false
            toolVersion     = '1.5'
        }
    }

}

allprojects {
    repositories {
        mavenCentral()
        maven { url  "https://dl.bintray.com/agorapulse/libs" }
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '**/*.yml'
        exclude '**/*.txt'
        exclude '**/*.gdsl'
        exclude '**/ConsoleSpec/*.groovy'
    }
}

projects {
    subprojects {
        dirs(['libs', 'examples']) { Project subproject ->
            sourceCompatibility = 1.8
            targetCompatibility = 1.8

            repositories {
                mavenCentral()
            }

            config {
                bintray {
                    name = subproject.name
                }
            }

            // location independent tests (useful for stable CI builds)
            tasks.withType(Test){
                systemProperty 'user.timezone', 'UTC'
                systemProperty 'user.language', 'en'
            }

            tasks.withType(JavaCompile) {
                options.encoding = "UTF-8"
                options.compilerArgs.add('-parameters')
            }

            tasks.withType(GroovyCompile) {
                groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
            }

            dependencies {
                annotationProcessor platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                api platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                compile platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                implementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                compileOnly platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                testCompile platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                testImplementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")

                annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
                api platform("io.micronaut:micronaut-bom:$micronautVersion")
                compile platform("io.micronaut:micronaut-bom:$micronautVersion")
                implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
                compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
                testCompile platform("io.micronaut:micronaut-bom:$micronautVersion")
                testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

                annotationProcessor "io.micronaut:micronaut-inject-java"
                annotationProcessor "io.micronaut:micronaut-validation"

                implementation "io.micronaut:micronaut-core"
                implementation "io.micronaut:micronaut-inject"
                implementation "io.micronaut:micronaut-validation"
                implementation "io.micronaut:micronaut-runtime"


                compileOnly "io.micronaut:micronaut-inject-groovy"
                compileOnly "com.agorapulse:remember:$rememberVersion"

                testImplementation("org.spockframework:spock-core:$spockVersion") {
                    exclude group: "org.codehaus.groovy", module: "groovy-all"
                }

                testImplementation 'com.agorapulse:micronaut-log4aws:1.1.5'
                testImplementation "io.micronaut:micronaut-inject-groovy"
                testImplementation "io.micronaut.test:micronaut-test-spock"

                testImplementation(group: 'org.testcontainers', name: 'spock', version: project.testcontainersVersion) {
                    exclude group: "org.codehaus.groovy", module: "groovy-all"
                }
            }

            // useful for IntelliJ
            task cleanOut(type: Delete) {
                delete file('out')
            }

            clean.dependsOn cleanOut
        }

        dir('libs') {
            processResources {
                filesMatching('**/org.codehaus.groovy.runtime.ExtensionModule') {
                    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION: version])
                }
            }

            jar {
                manifest.attributes provider: 'gradle'
            }

            config {
                bintray {
                    enabled = true
                }
            }

            dependencies {
                testImplementation group: 'org.spockframework', name: 'spock-core', version: spockVersion
            }
        }
    }
}


check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'coveralls')
